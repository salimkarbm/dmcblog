openapi: 3.0.0
info:
  title: Blog API
  version: 1.0.0
  description: Blog API documentation

servers:
  - url: http://localhost:8000/api/v1

tags:
  - name: Auth
    description: Everything about authentication
  - name: Post
    description: Access to posts
  - name: Comment
    description: Operations about comments
  - name: User
    description: Operations about user
  - name: Reply
    description: Operations about replies

paths:
  /auth/signUp:
    post:
      tags:
        - Auth
      summary: Sign up
      description: Create and sign up new user.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfully signed up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: User already exists
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/signIn:
    post:
      tags:
        - Auth
      summary: Sign in
      description: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: salimimuzai@gmail.com
                password:
                  type: string
                  example: Pa$$word
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation exception

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Successfully sent reset email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successfully reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /posts:
    post:
      tags:
        - Post
      summary: Create post
      description: Create post and add to database.
      operationId: addPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                  description: List of tags
            encoding:
              tags:
                style: form
                explode: true
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Post
      summary: Get all post
      description: Fetch all post from database.
      operationId: getAllPost
      parameters:
        - name: page
          in: query
          required: false
          type: integer
          minimum: 1
          default: 1
          description: Page number
        - name: limit
          in: query
          required: true
          type: integer
          minimum: 1
          default: 10
          description: Number of post to be returned
      responses:
        '200':
          description: Post fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}:
    get:
      tags:
        - Post
      summary: Get post
      description: Fetch post from database.
      operationId: getPost
      parameters:
        - name: postId
          in: path
          required: true
          type: string
          description: Post id
      responses:
        '200':
          description: Post fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{userId}/posts:
    get:
      tags:
        - Post
      summary: Get user posts
      description: Fetch user posts from database.
      operationId: getMyPost
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: User id
      security:
        - bearerAuth: []    
      responses:
        '200':
          description: Posts fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - fullName
        - email
        - password
      properties:
        fullName:
          type: string
        email:
          type: string
        password:
          type: string

    Post:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        image:
          type: string
          format: binary
        tags:
          type: array
          items:
            type: string
          description: List of tags

    Error:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        error:
          type: string
        message:
          type: string
